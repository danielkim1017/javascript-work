// #1 - Pyramid
console.log("  #  ")
console.log(" ### ")
console.log("#####")

// #2 - Initializing Variable
let character;

// #3 & #4 - Variable Assignment
let character = "Hello";
let character = 'Hello'; // Strings can be both single and double quote

// #5 - Console Output
let character = 'Hello';
console.log(character);

// #6 & 7 - Reassigning Variable & Reprint
let character = 'Hello';
console.log(character);
character = 'World';
console.log(character);

// #8 & 9 & 10 - Variable Naming - Camel Case
let secondCharacter; // this sort of initialization returns 'undefined'
secondCharacter = 'assigned';
console.log(secondCharacter); // fixing this sort of issue

// 11 - Assigning Variables as Values
secondCharacter = character;

// 12 - Review of All the Concepts so Far
let profession = 'teacher';
let age;
console.log(profession);
console.log(age);

// 13 - Assigning a number as variable value 
let count = 8; 

// 14 - Mathematical Operations
let count = 8;
console.log(count + 1); // 9
console.log(count * 2.0); // 16 (Not a float output)

// 15 & 16 - Array Initializations
let rows = []; // Empty Array
let rows = ['Quincy', 'Adams']; // Array with Strings

// 17 - Accessing Values Inside the Array 
console.log(rows[0]);

// 18 - Changing Values Inside the Array
rows[1] = 10;
console.log(rows); // ['Quincy', 10] Output

// 22 - Accessing Last Index, Length Function
rows[2] = rows[rows.length - 1];

// 24 - Reviewing Array Concepts so Far
let cities = ['London', 'New York', 'Mumbai'];
console.log(cities);
cities[cities.length - 1] = 'Mexico City';
console.log(cities);

// 25 & 27 - Array Manipulation
let rows = ["Naomi", "Quincy", "CamperChan"];
rows.push('freeCodeCamp'); // Pushes value to the end of the array
let popped = rows.pop(); // pops and returns the end value
console.log(rows);
console.log(popped)

// 28 - Return Values of Pop and Push
let pushed = rows.push('Hello');
console.log(pushed); // pushed returns the length of the new array

// 31 - Const Variables - Cannot be Reassigned and Unitialized
const character = "Hello";
const count = 8;
const rows = [];

// 32 ~ 40 - For Loop Syntax 
for (let i = 0; i < count; i = i + 1) {
console.log(i);
}

// 41 - Basics of for...of loop Structure
for (const row of rows) {}
for (const value of iterable) {}

// 42 & 43 - String concatenation and new line character
for (const row of rows) {
result = result + row + "\n";
}

// 45 - Repeat Method
for (let i = 0; i < count; i = i + 1) {
  rows.push(character.repeat(i+1));
}

// 46 ~ 54 Functions in JavaScript
function padRow(name) {
return name // Note there is no () on return method
}
const call = padRow("string");
console.log(call)

// 55 Simple Function Writing Test
function addTwoNumbers(val1, val2) {
  return val1 + val2
}
let sum = addTwoNumbers(5, 10);
console.log(sum);

// 56 ~ 77 Variable Scope and Initial Pyramid Generator
function padRow(rowNumber, rowCount) {
  return " ".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + " ".repeat(rowCount - rowNumber);
}

// 78 - Comments
/* Comment Block */

// 79 -  If Statements - Introduction of truthy and falsy value
if (condition) {body} // falsy values - "", 0, false, undefined, NaN

// 88 - Equality Operators, === is strict, must be same value and type, !== is DNE

// 98 - Working Pyramid Generator Function so Far
const character = "#";
const count = 8;
const rows = [];

function padRow(rowNumber, rowCount) {
  return " ".repeat(rowCount - rowNumber) + character.repeat(2 * rowNumber - 1) + " ".repeat(rowCount - rowNumber);
}

// FOR LOOP VERSION
/*
for (let i = 1; i <= count; i++) {
  rows.push(padRow(i, count));
}
*/

// WHILE LOOP VERSION
/*
while (rows.length < count) {
  rows.push(padRow(rows.length + 1, count));
}
*/

let result = ""

for (const row of rows) {
  result = result + "\n" + row;
}

console.log(result);

// 99 ~ 105 - Inverted Pyramid Approach #1
/*for (let i = count; i > 0; i -= 1) {
  rows.push(padRow(i, count));
}
*/

// 

















